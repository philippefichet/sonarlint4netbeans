/*
 * sonarlint4netbeans: SonarLint integration for Apache Netbeans
 * Copyright (C) 2023 Philippe FICHET.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package com.github.philippefichet.sonarlint4netbeans.remote.ui;

import com.github.philippefichet.sonarlint4netbeans.remote.configuration.SonarLintRemoteConnectionConfiguration;
import com.github.philippefichet.sonarlint4netbeans.remote.configuration.SonarLintRemoteConnectionConfigurationManagement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.openide.util.Lookup;

/**
 *
 * @author FICHET Philippe &lt;philippe.fichet@laposte.net&gt;
 */
@SuppressWarnings({
    "java:S1450" // "Private fields used as local variables in methods" disabled because managed by netbeans
})
public class SonarLintSonarCloudPanel extends javax.swing.JPanel {

    private String oldBaseURL;
    
    /**
     * Creates new form SonarLintSonarCloudPanel
     */
    public SonarLintSonarCloudPanel() {
        initComponents();
        connectionCnfigurationComboBox.setRenderer(new SonarLintConnectionConfigurationListCellRenderer());
        initConnectionCnfigurationComboBox();
        isSonarCloudCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isSonarCloudCheckBox.isSelected()) {
                    oldBaseURL = baseURLTextField.getText();
                    baseURLTextField.setText("https://sonarcloud.io");
                    baseURLTextField.setEditable(false);
                    baseURLTextField.setEnabled(false);
                } else {
                    baseURLTextField.setText(oldBaseURL);
                    baseURLTextField.setEditable(true);
                    baseURLTextField.setEnabled(true);
                }
            }
        });
    }
    
    private void initConnectionCnfigurationComboBox()
    {
        connectionCnfigurationComboBox.removeAllItems();
        getSonarLintConnectionConfigurationManagement().getAllSonarLintConnectionConfigurations()
            .forEach(connectionCnfigurationComboBox::addItem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectionListPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        connectionCnfigurationComboBox = new javax.swing.JComboBox<>();
        editConnectionConfiguration = new javax.swing.JButton();
        removeConnectionConfiguration = new javax.swing.JButton();
        connectionEditPanel = new javax.swing.JPanel();
        connectionEditDataPanel = new javax.swing.JPanel();
        connectionIdLabel = new javax.swing.JLabel();
        connectionIdTextField = new javax.swing.JTextField();
        baseURLLabel = new javax.swing.JLabel();
        baseURLTextField = new javax.swing.JTextField();
        isSonarCloudLabel = new javax.swing.JLabel();
        isSonarCloudCheckBox = new javax.swing.JCheckBox();
        authTokenLabel = new javax.swing.JLabel();
        authTokenPasswordField = new javax.swing.JPasswordField();
        connectionSavePanel = new javax.swing.JPanel();
        saveConfiguration = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(5, 5));

        connectionListPanel.setLayout(new java.awt.BorderLayout(5, 5));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(editConnectionConfiguration, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.editConnectionConfiguration.text")); // NOI18N
        editConnectionConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConnectionConfiguration(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeConnectionConfiguration, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.removeConnectionConfiguration.text")); // NOI18N
        removeConnectionConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeConnectionConfiguration(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(connectionCnfigurationComboBox, 0, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editConnectionConfiguration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeConnectionConfiguration)
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(connectionCnfigurationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editConnectionConfiguration)
                    .addComponent(removeConnectionConfiguration))
                .addContainerGap())
        );

        connectionListPanel.add(jPanel1, java.awt.BorderLayout.NORTH);

        add(connectionListPanel, java.awt.BorderLayout.NORTH);

        connectionEditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.connectionEditPanel.border.title"))); // NOI18N
        connectionEditPanel.setLayout(new java.awt.BorderLayout(5, 5));

        connectionEditDataPanel.setLayout(new java.awt.GridLayout(4, 2, 5, 5));

        org.openide.awt.Mnemonics.setLocalizedText(connectionIdLabel, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.connectionIdLabel.text")); // NOI18N
        connectionEditDataPanel.add(connectionIdLabel);

        connectionIdTextField.setText(org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.connectionIdTextField.text")); // NOI18N
        connectionEditDataPanel.add(connectionIdTextField);

        org.openide.awt.Mnemonics.setLocalizedText(baseURLLabel, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.baseURLLabel.text")); // NOI18N
        connectionEditDataPanel.add(baseURLLabel);

        baseURLTextField.setText(org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.baseURLTextField.text")); // NOI18N
        connectionEditDataPanel.add(baseURLTextField);

        org.openide.awt.Mnemonics.setLocalizedText(isSonarCloudLabel, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.isSonarCloudLabel.text")); // NOI18N
        connectionEditDataPanel.add(isSonarCloudLabel);

        org.openide.awt.Mnemonics.setLocalizedText(isSonarCloudCheckBox, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.isSonarCloudCheckBox.text")); // NOI18N
        connectionEditDataPanel.add(isSonarCloudCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(authTokenLabel, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.authTokenLabel.text")); // NOI18N
        connectionEditDataPanel.add(authTokenLabel);

        authTokenPasswordField.setText(org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.authTokenPasswordField.text")); // NOI18N
        connectionEditDataPanel.add(authTokenPasswordField);

        connectionEditPanel.add(connectionEditDataPanel, java.awt.BorderLayout.NORTH);

        org.openide.awt.Mnemonics.setLocalizedText(saveConfiguration, org.openide.util.NbBundle.getMessage(SonarLintSonarCloudPanel.class, "SonarLintSonarCloudPanel.saveConfiguration.text")); // NOI18N
        saveConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connectionSavePanelLayout = new javax.swing.GroupLayout(connectionSavePanel);
        connectionSavePanel.setLayout(connectionSavePanelLayout);
        connectionSavePanelLayout.setHorizontalGroup(
            connectionSavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionSavePanelLayout.createSequentialGroup()
                .addGap(0, 269, Short.MAX_VALUE)
                .addComponent(saveConfiguration)
                .addGap(0, 269, Short.MAX_VALUE))
        );
        connectionSavePanelLayout.setVerticalGroup(
            connectionSavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectionSavePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveConfiguration)
                .addGap(0, 0, 0))
        );

        connectionEditPanel.add(connectionSavePanel, java.awt.BorderLayout.SOUTH);

        add(connectionEditPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private SonarLintRemoteConnectionConfigurationManagement getSonarLintConnectionConfigurationManagement()
    {
        return Lookup.getDefault().lookup(SonarLintRemoteConnectionConfigurationManagement.class);
    }
    
    private void saveConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationActionPerformed
        String connectionId = connectionIdTextField.getText();
        getSonarLintConnectionConfigurationManagement().saveSonarLintConnectionConfiguration(new SonarLintRemoteConnectionConfiguration(
                connectionId,
                baseURLTextField.getText(),
                isSonarCloudCheckBox.isSelected()
            )
        );
        getSonarLintConnectionConfigurationManagement().saveAuthTokenFromConnectionId(
            connectionId,
            new String(authTokenPasswordField.getPassword())
        );
        initConnectionCnfigurationComboBox();
    }//GEN-LAST:event_saveConfigurationActionPerformed

    private void editConnectionConfiguration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConnectionConfiguration
        SonarLintRemoteConnectionConfiguration sonarLintConnectionConfiguration = 
            (SonarLintRemoteConnectionConfiguration)connectionCnfigurationComboBox.getSelectedItem();
        String connectionId = sonarLintConnectionConfiguration.getConnectionId();
        if (sonarLintConnectionConfiguration != null) {
            connectionIdTextField.setText(connectionId);
            baseURLTextField.setText(sonarLintConnectionConfiguration.getBaseURL());
            isSonarCloudCheckBox.setSelected(sonarLintConnectionConfiguration.isIsSonarCloud());
            getSonarLintConnectionConfigurationManagement()
                .getAuthTokenFromConnectionId(connectionId)
                .ifPresent(authTokenPasswordField::setText);
        }
    }//GEN-LAST:event_editConnectionConfiguration

    private void removeConnectionConfiguration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeConnectionConfiguration
        SonarLintRemoteConnectionConfiguration sonarLintConnectionConfiguration = 
                    (SonarLintRemoteConnectionConfiguration)connectionCnfigurationComboBox.getSelectedItem();
        if (sonarLintConnectionConfiguration != null) {
            SonarLintRemoteConnectionConfigurationManagement sonarLintConnectionConfigurationManagement = getSonarLintConnectionConfigurationManagement();
            sonarLintConnectionConfigurationManagement.deleteAuthTokenFromConnectionId(sonarLintConnectionConfiguration.getConnectionId());
            sonarLintConnectionConfigurationManagement.deleteSonarLintConnectionConfigurationFromConnectionId(sonarLintConnectionConfiguration.getConnectionId());
            initConnectionCnfigurationComboBox();
        }
    }//GEN-LAST:event_removeConnectionConfiguration


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authTokenLabel;
    private javax.swing.JPasswordField authTokenPasswordField;
    private javax.swing.JLabel baseURLLabel;
    private javax.swing.JTextField baseURLTextField;
    private javax.swing.JComboBox<SonarLintRemoteConnectionConfiguration> connectionCnfigurationComboBox;
    private javax.swing.JPanel connectionEditDataPanel;
    private javax.swing.JPanel connectionEditPanel;
    private javax.swing.JLabel connectionIdLabel;
    private javax.swing.JTextField connectionIdTextField;
    private javax.swing.JPanel connectionListPanel;
    private javax.swing.JPanel connectionSavePanel;
    private javax.swing.JButton editConnectionConfiguration;
    private javax.swing.JCheckBox isSonarCloudCheckBox;
    private javax.swing.JLabel isSonarCloudLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton removeConnectionConfiguration;
    private javax.swing.JButton saveConfiguration;
    // End of variables declaration//GEN-END:variables
}
