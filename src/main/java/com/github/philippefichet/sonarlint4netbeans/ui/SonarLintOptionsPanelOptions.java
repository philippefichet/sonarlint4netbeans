/*
 * sonarlint4netbeans: SonarLint integration for Apache Netbeans
 * Copyright (C) 2020 Philippe FICHET.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package com.github.philippefichet.sonarlint4netbeans.ui;

import com.github.philippefichet.sonarlint4netbeans.SonarLintEngine;
import com.github.philippefichet.sonarlint4netbeans.SonarLintOptions;
import com.github.philippefichet.sonarlint4netbeans.SonarLintUtils;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.util.Optional;
import java.util.function.Consumer;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.cookies.EditorCookie;
import org.openide.cookies.OpenCookie;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.sonarsource.sonarlint.core.client.api.common.Version;

/**
 *
 * @author FICHET Philippe &lt;philippe.fichet@laposte.net&gt;
 */
public class SonarLintOptionsPanelOptions extends javax.swing.JPanel {

    private String nodeJSPathToSave = null;
    private Version nodeJSVersionToSave = null;
    private Boolean applyDifferentRulesOnTestFiles = null;
    private SonarLintEngine engine;
    private SonarLintOptionsPanelOptionsListener listener;

    /**
     * Creates new form SonarLintOptionsPanelOptionsJPanel
     */
    public SonarLintOptionsPanelOptions(
        SonarLintEngine engine,
        SonarLintOptionsPanelOptionsListener listener
    ) {
        this.engine = engine;
        this.listener = listener;
        initComponents();
        initComponentsBehaviors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodeJSPathLabel = new javax.swing.JLabel();
        nodeJSVersionLabel = new javax.swing.JLabel();
        nodeJSFeedbackLabel = new javax.swing.JLabel();
        nodeJSStatusLabel = new javax.swing.JLabel();
        nodeJSPathField = new javax.swing.JTextField();
        nodeJSVersionField = new javax.swing.JTextField();
        openStyleSheet = new javax.swing.JButton();
        applyTestRules = new javax.swing.JCheckBox();
        nodeJSPathChooser = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(nodeJSPathLabel, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSPathLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nodeJSVersionLabel, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSVersionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nodeJSFeedbackLabel, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSFeedbackLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nodeJSStatusLabel, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSStatusLabel.text")); // NOI18N

        nodeJSPathField.setText(org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSPathField.text")); // NOI18N

        nodeJSVersionField.setText(org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSVersionField.text")); // NOI18N
        nodeJSVersionField.setEnabled(false);
        nodeJSVersionField.setText(engine.getNodeJSVersion().map(Version::toString).orElse(""));

        org.openide.awt.Mnemonics.setLocalizedText(openStyleSheet, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.openStyleSheet.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(applyTestRules, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.applyTestRules.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nodeJSPathChooser, org.openide.util.NbBundle.getMessage(SonarLintOptionsPanelOptions.class, "SonarLintOptionsPanelOptions.nodeJSPathChooser.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openStyleSheet, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nodeJSVersionLabel)
                            .addComponent(nodeJSPathLabel)
                            .addComponent(nodeJSFeedbackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nodeJSStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nodeJSPathField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nodeJSPathChooser))
                            .addComponent(nodeJSVersionField)))
                    .addComponent(applyTestRules, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeJSPathLabel)
                    .addComponent(nodeJSPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeJSPathChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeJSVersionLabel)
                    .addComponent(nodeJSVersionField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeJSStatusLabel)
                    .addComponent(nodeJSFeedbackLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(openStyleSheet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyTestRules))
        );

        nodeJSPathField.setText(engine.getNodeJSPath().orElse(""));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox applyTestRules;
    private javax.swing.JLabel nodeJSFeedbackLabel;
    private javax.swing.JButton nodeJSPathChooser;
    private javax.swing.JTextField nodeJSPathField;
    private javax.swing.JLabel nodeJSPathLabel;
    private javax.swing.JLabel nodeJSStatusLabel;
    private javax.swing.JTextField nodeJSVersionField;
    private javax.swing.JLabel nodeJSVersionLabel;
    private javax.swing.JButton openStyleSheet;
    // End of variables declaration//GEN-END:variables

    private void initComponentsBehaviors() {
        Consumer<String> checkNodeJS = (path) -> {
            nodeJSPathToSave = null;
            nodeJSVersionToSave = null;
            nodeJSVersionField.setText("");
            if (path == null || path.isEmpty()) {
                nodeJSStatusLabel.setText("NodeJS path is required");
            }
            else
            {
                nodeJSStatusLabel.setText("try to detect NodeJS version ...");
                new Thread(() -> {
                    Optional<Version> detectNodeJSVersion = SonarLintUtils.detectNodeJSVersion(path);
                    SwingUtilities.invokeLater(() -> {
                        if (detectNodeJSVersion.isPresent()) {
                            nodeJSStatusLabel.setText("OK");
                            nodeJSPathToSave = path;
                            nodeJSVersionToSave = detectNodeJSVersion.get();
                            nodeJSVersionField.setText(nodeJSVersionToSave.toString());
                        } else {
                            nodeJSStatusLabel.setText("Unable to detect NodeJS version");
                        }
                        if (listener != null) {
                            listener.nodeJSOptionsChanged(nodeJSPathToSave, nodeJSVersionToSave);
                        }
                    });
                }).start();
            }
        };

        nodeJSPathChooser.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            int fileChooserReturn = fileChooser.showOpenDialog(this);
            if(fileChooserReturn == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                nodeJSPathField.setText(selectedFile.getAbsolutePath());
            }
        });
        nodeJSPathField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkNodeJS.accept(nodeJSPathField.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkNodeJS.accept(nodeJSPathField.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkNodeJS.accept(nodeJSPathField.getText());
            }
        });
        SonarLintOptions sonarlintOptions = Lookup.getDefault().lookup(SonarLintOptions.class);
        openStyleSheet.addActionListener(l -> {
            DataObject d;
            try {
                d = DataObject.find(sonarlintOptions.getSonarLintDetailsStyle());
                EditorCookie ec = (EditorCookie)d.getLookup().lookup(EditorCookie.class);
                if (ec == null) {
                    OpenCookie oc = (OpenCookie)d.getLookup().lookup(OpenCookie.class);
                    oc.open();
                } else {
                    ec.open();
                }
            } catch (DataObjectNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        });
        checkNodeJS.accept(engine.getNodeJSPath().orElse(null));
        applyTestRules.setSelected(sonarlintOptions.applyDifferentRulesOnTestFiles());
        applyTestRules.addItemListener(e -> {
            applyDifferentRulesOnTestFiles = e.getStateChange() == ItemEvent.SELECTED;
            if (listener != null) {
                listener.testRulesOptionsChanged(applyDifferentRulesOnTestFiles);
            }
        });
    }
}
